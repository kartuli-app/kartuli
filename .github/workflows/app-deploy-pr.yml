name: App Deploy (PR)

on:
  pull_request:
    branches: [main]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'tools/storybook/**'
      - 'tools/e2e/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'turbo.json'
      - '.github/workflows/app-deploy-pr.yml'
      - '!tools/web-docs-client/**'
      - '!.github/workflows/docs-**'

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: app-deploy-pr-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validate-and-deploy:
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: |
            **/pnpm-lock.yaml
      
      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run typecheck
        run: pnpm turbo run typecheck

      - name: Run linting
        run: pnpm turbo run lint

      - name: Run tests
        run: pnpm turbo run test --filter='!@kartuli/e2e'
      
      - name: Deploy to Vercel Preview
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
      
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ hashFiles('tools/e2e/package.json') }}
          restore-keys: |
            playwright-browsers-

      - name: Install Playwright browsers
        run: pnpm --filter @kartuli/e2e exec playwright install chromium
      
      - name: Run E2E smoke tests
        env:
          BASE_URL: ${{ steps.deploy.outputs.preview-url }}
        run: pnpm test:e2e
      
      - name: Upload E2E artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts-pr-${{ github.run_number }}
          path: tools/e2e/test-results/
          retention-days: 3
      
      - name: Comment PR with Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('ðŸš€ **Preview Deployment**')
            );
            
            const previewUrl = '${{ steps.deploy.outputs.preview-url }}';
            
            const commentBody = `ðŸš€ **Preview Deployment**
            
            Your changes have been deployed to a preview environment:
            
            **Preview URL:** ${previewUrl}
            
            This preview will be automatically cleaned up when the PR is closed or merged.
            
            ---
            *Preview deployment powered by Vercel*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

