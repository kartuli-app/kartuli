# Git hooks configuration for Kartuli monorepo
# See: https://github.com/evilmartians/lefthook

# Pre-commit hook: Fast checks on staged files only
pre-commit:
  parallel: true
  commands:
    # Format staged files automatically
    format:
      glob: "*.{js,jsx,ts,tsx,json}"
      run: pnpm exec biome format --write {staged_files}
      stage_fixed: true
    
    # Lint staged files with auto-fixes
    lint:
      glob: "*.{js,jsx,ts,tsx,json}"
      run: pnpm exec biome lint --write {staged_files}
      fail_text: |
        ‚ùå Linting failed. Please fix the errors above.
        Run 'pnpm lint:fix' to auto-fix issues.
    
    # Check for merge conflict markers
    conflict-markers:
      glob: "*"
      run: |
        if grep -E '^(<<<<<<<|=======|>>>>>>>)' {staged_files}; then
          echo "‚ùå Merge conflict markers detected in staged files:"
          grep -n -E '^(<<<<<<<|=======|>>>>>>>)' {staged_files}
          echo ""
          echo "Please resolve merge conflicts before committing."
          exit 1
        fi
    
    # Check for large files in src/ directories
    large-files:
      glob: "src/**/*"
      run: |
        large_files=$(find {staged_files} -size +5M 2>/dev/null || true)
        if [ -n "$large_files" ]; then
          echo "‚ùå Large files detected (>5MB) in src/ directories:"
          echo "$large_files"
          echo ""
          echo "Please remove large files from src/ directories or add them to .gitignore."
          exit 1
        fi
    
    # Check for common debugging patterns (configurable)
    debug-patterns:
      glob: "*.{js,jsx,ts,tsx}"
      run: |
        if grep -E '(console\.log|debugger|alert\()' {staged_files} >/dev/null 2>&1; then
          echo "‚ö†Ô∏è  Debug patterns detected in staged files:"
          grep -n -E '(console\.log|debugger|alert\()' {staged_files}
          echo ""
          echo "Consider removing debug statements before committing."
          echo "Use 'git commit --no-verify' to bypass this check if needed."
          exit 1
        fi

# Commit message hook: Enforce Conventional Commits
commit-msg:
  commands:
    validate-conventional-commit:
      run: .lefthook/commit-msg/validate-conventional-commit.sh {1}

# Pre-push hook: Run checks on affected workspaces only
pre-push:
  parallel: false
  commands:
    # Typecheck affected packages
    typecheck:
      run: |
        echo "üîç Running typecheck on affected packages..."
        pnpm turbo run typecheck --filter='[HEAD^]'
    
    # Run unit tests on affected packages (exclude E2E)
    test:
      run: |
        echo "üß™ Running tests on affected packages..."
        pnpm turbo run test --filter='[HEAD^]' --filter='!@kartuli/e2e'
