# Kartuli Project Rules

## Commit Convention
Always use conventional commit format for all commits:
- Format: `<type>[optional scope]: <description>`
- Types: feat, fix, docs, style, refactor, perf, test, chore
- Examples: `docs: add project overview`, `feat(auth): add social login`

## Git Workflow
- Never create commits unless explicitly requested by the user
- Always ask for permission before committing changes
- Use conventional commit format when commits are requested

## Code Style
- Use TypeScript for all new code
- Follow ESLint configuration
- Use Prettier for code formatting
- Write meaningful variable and function names

## Documentation
- Keep docs.md updated with all project decisions
- Use clear, concise language
- Include examples where helpful
- Update ubiquitous language when introducing new terms

## Architecture
- Prefer serverless and managed solutions
- Optimize for cost efficiency
- Design for offline-first functionality
- Use PWA best practices

## Testing
- Tests files live next to the file they are testing
- Avoid separate test folder
- Maintain test coverage above 80%
- Use descriptive test names
- Test both happy path and edge cases

## Documentation Maintenance
- Always update relevant README.md files when adding, removing, or reordering documents
- Use zero-padded numbering: 01, 02, 03, etc.
- Maintain logical order within folders
- README files contain only links and brief descriptions
- Exclude README files from LLM document generation
- Update documentation when making code changes that affect architecture, data models, user experience, or infrastructure